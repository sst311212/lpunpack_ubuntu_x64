// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_partitions_device_info.proto

#include "dynamic_partitions_device_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace android {
PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_Partition::DynamicPartitionsDeviceInfoProto_Partition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fs_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.fs_size_)*/uint64_t{0u}
  , /*decltype(_impl_.fs_used_)*/uint64_t{0u}
  , /*decltype(_impl_.is_dynamic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal() {}
  union {
    DynamicPartitionsDeviceInfoProto_Partition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_Partition_default_instance_;
PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_Group::DynamicPartitionsDeviceInfoProto_Group(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maximum_size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal() {}
  union {
    DynamicPartitionsDeviceInfoProto_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_Group_default_instance_;
PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_BlockDevice::DynamicPartitionsDeviceInfoProto_BlockDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.block_size_)*/uint64_t{0u}
  , /*decltype(_impl_.alignment_)*/uint64_t{0u}
  , /*decltype(_impl_.alignment_offset_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal() {}
  union {
    DynamicPartitionsDeviceInfoProto_BlockDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_BlockDevice_default_instance_;
PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto::DynamicPartitionsDeviceInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.block_devices_)*/{}
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.retrofit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DynamicPartitionsDeviceInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicPartitionsDeviceInfoProtoDefaultTypeInternal() {}
  union {
    DynamicPartitionsDeviceInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicPartitionsDeviceInfoProtoDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_default_instance_;
}  // namespace android
static ::_pb::Metadata file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dynamic_5fpartitions_5fdevice_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dynamic_5fpartitions_5fdevice_5finfo_2eproto = nullptr;

const uint32_t TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.group_name_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.is_dynamic_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.fs_size_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.fs_used_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Partition, _impl_.fs_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Group, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_Group, _impl_.maximum_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.block_size_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.alignment_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _impl_.retrofit_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _impl_.partitions_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::android::DynamicPartitionsDeviceInfoProto, _impl_.block_devices_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::android::DynamicPartitionsDeviceInfoProto_Partition)},
  { 13, -1, -1, sizeof(::android::DynamicPartitionsDeviceInfoProto_Group)},
  { 21, -1, -1, sizeof(::android::DynamicPartitionsDeviceInfoProto_BlockDevice)},
  { 32, -1, -1, sizeof(::android::DynamicPartitionsDeviceInfoProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::android::_DynamicPartitionsDeviceInfoProto_Partition_default_instance_._instance,
  &::android::_DynamicPartitionsDeviceInfoProto_Group_default_instance_._instance,
  &::android::_DynamicPartitionsDeviceInfoProto_BlockDevice_default_instance_._instance,
  &::android::_DynamicPartitionsDeviceInfoProto_default_instance_._instance,
};

const char descriptor_table_protodef_dynamic_5fpartitions_5fdevice_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$dynamic_partitions_device_info.proto\022\007"
  "android\"\252\005\n DynamicPartitionsDeviceInfoP"
  "roto\022\017\n\007enabled\030\001 \001(\010\022\020\n\010retrofit\030\002 \001(\010\022"
  "G\n\npartitions\030\003 \003(\01323.android.DynamicPar"
  "titionsDeviceInfoProto.Partition\022\?\n\006grou"
  "ps\030\004 \003(\0132/.android.DynamicPartitionsDevi"
  "ceInfoProto.Group\022[\n\rblock_devices\030\005 \003(\013"
  "25.android.DynamicPartitionsDeviceInfoPr"
  "oto.BlockDeviceR\rblock_devices\032\265\001\n\tParti"
  "tion\022\014\n\004name\030\001 \001(\t\022\036\n\ngroup_name\030\002 \001(\tR\n"
  "group_name\022\036\n\nis_dynamic\030\003 \001(\010R\nis_dynam"
  "ic\022\014\n\004size\030\004 \001(\004\022\030\n\007fs_size\030\005 \001(\004R\007fs_si"
  "ze\022\030\n\007fs_used\030\006 \001(\004R\007fs_used\022\030\n\007fs_type\030"
  "\007 \001(\tR\007fs_type\0329\n\005Group\022\014\n\004name\030\001 \001(\t\022\"\n"
  "\014maximum_size\030\002 \001(\004R\014maximum_size\032\210\001\n\013Bl"
  "ockDevice\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\036\n"
  "\nblock_size\030\003 \001(\004R\nblock_size\022\021\n\talignme"
  "nt\030\004 \001(\004\022*\n\020alignment_offset\030\005 \001(\004R\020alig"
  "nment_offsetb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto = {
    false, false, 740, descriptor_table_protodef_dynamic_5fpartitions_5fdevice_5finfo_2eproto,
    "dynamic_partitions_device_info.proto",
    &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto::offsets,
    file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto, file_level_enum_descriptors_dynamic_5fpartitions_5fdevice_5finfo_2eproto,
    file_level_service_descriptors_dynamic_5fpartitions_5fdevice_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_getter() {
  return &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dynamic_5fpartitions_5fdevice_5finfo_2eproto(&descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto);
namespace android {

// ===================================================================

class DynamicPartitionsDeviceInfoProto_Partition::_Internal {
 public:
};

DynamicPartitionsDeviceInfoProto_Partition::DynamicPartitionsDeviceInfoProto_Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:android.DynamicPartitionsDeviceInfoProto.Partition)
}
DynamicPartitionsDeviceInfoProto_Partition::DynamicPartitionsDeviceInfoProto_Partition(const DynamicPartitionsDeviceInfoProto_Partition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DynamicPartitionsDeviceInfoProto_Partition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.fs_type_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.fs_size_){}
    , decltype(_impl_.fs_used_){}
    , decltype(_impl_.is_dynamic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fs_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fs_type().empty()) {
    _this->_impl_.fs_type_.Set(from._internal_fs_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_dynamic_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.is_dynamic_));
  // @@protoc_insertion_point(copy_constructor:android.DynamicPartitionsDeviceInfoProto.Partition)
}

inline void DynamicPartitionsDeviceInfoProto_Partition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.fs_type_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.fs_size_){uint64_t{0u}}
    , decltype(_impl_.fs_used_){uint64_t{0u}}
    , decltype(_impl_.is_dynamic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fs_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DynamicPartitionsDeviceInfoProto_Partition::~DynamicPartitionsDeviceInfoProto_Partition() {
  // @@protoc_insertion_point(destructor:android.DynamicPartitionsDeviceInfoProto.Partition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicPartitionsDeviceInfoProto_Partition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.group_name_.Destroy();
  _impl_.fs_type_.Destroy();
}

void DynamicPartitionsDeviceInfoProto_Partition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicPartitionsDeviceInfoProto_Partition::Clear() {
// @@protoc_insertion_point(message_clear_start:android.DynamicPartitionsDeviceInfoProto.Partition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.group_name_.ClearToEmpty();
  _impl_.fs_type_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_dynamic_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.is_dynamic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicPartitionsDeviceInfoProto_Partition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "android.DynamicPartitionsDeviceInfoProto.Partition.name"));
        } else
          goto handle_unusual;
        continue;
      // string group_name = 2 [json_name = "group_name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "android.DynamicPartitionsDeviceInfoProto.Partition.group_name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_dynamic = 3 [json_name = "is_dynamic"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fs_size = 5 [json_name = "fs_size"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fs_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fs_used = 6 [json_name = "fs_used"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.fs_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fs_type = 7 [json_name = "fs_type"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fs_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "android.DynamicPartitionsDeviceInfoProto.Partition.fs_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicPartitionsDeviceInfoProto_Partition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.DynamicPartitionsDeviceInfoProto.Partition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.DynamicPartitionsDeviceInfoProto.Partition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string group_name = 2 [json_name = "group_name"];
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.DynamicPartitionsDeviceInfoProto.Partition.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // bool is_dynamic = 3 [json_name = "is_dynamic"];
  if (this->_internal_is_dynamic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_dynamic(), target);
  }

  // uint64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size(), target);
  }

  // uint64 fs_size = 5 [json_name = "fs_size"];
  if (this->_internal_fs_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fs_size(), target);
  }

  // uint64 fs_used = 6 [json_name = "fs_used"];
  if (this->_internal_fs_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_fs_used(), target);
  }

  // string fs_type = 7 [json_name = "fs_type"];
  if (!this->_internal_fs_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs_type().data(), static_cast<int>(this->_internal_fs_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.DynamicPartitionsDeviceInfoProto.Partition.fs_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fs_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.DynamicPartitionsDeviceInfoProto.Partition)
  return target;
}

size_t DynamicPartitionsDeviceInfoProto_Partition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.DynamicPartitionsDeviceInfoProto.Partition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string group_name = 2 [json_name = "group_name"];
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string fs_type = 7 [json_name = "fs_type"];
  if (!this->_internal_fs_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs_type());
  }

  // uint64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 fs_size = 5 [json_name = "fs_size"];
  if (this->_internal_fs_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fs_size());
  }

  // uint64 fs_used = 6 [json_name = "fs_used"];
  if (this->_internal_fs_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fs_used());
  }

  // bool is_dynamic = 3 [json_name = "is_dynamic"];
  if (this->_internal_is_dynamic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicPartitionsDeviceInfoProto_Partition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DynamicPartitionsDeviceInfoProto_Partition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicPartitionsDeviceInfoProto_Partition::GetClassData() const { return &_class_data_; }


void DynamicPartitionsDeviceInfoProto_Partition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DynamicPartitionsDeviceInfoProto_Partition*>(&to_msg);
  auto& from = static_cast<const DynamicPartitionsDeviceInfoProto_Partition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:android.DynamicPartitionsDeviceInfoProto.Partition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_group_name().empty()) {
    _this->_internal_set_group_name(from._internal_group_name());
  }
  if (!from._internal_fs_type().empty()) {
    _this->_internal_set_fs_type(from._internal_fs_type());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_fs_size() != 0) {
    _this->_internal_set_fs_size(from._internal_fs_size());
  }
  if (from._internal_fs_used() != 0) {
    _this->_internal_set_fs_used(from._internal_fs_used());
  }
  if (from._internal_is_dynamic() != 0) {
    _this->_internal_set_is_dynamic(from._internal_is_dynamic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicPartitionsDeviceInfoProto_Partition::CopyFrom(const DynamicPartitionsDeviceInfoProto_Partition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.DynamicPartitionsDeviceInfoProto.Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicPartitionsDeviceInfoProto_Partition::IsInitialized() const {
  return true;
}

void DynamicPartitionsDeviceInfoProto_Partition::InternalSwap(DynamicPartitionsDeviceInfoProto_Partition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fs_type_, lhs_arena,
      &other->_impl_.fs_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto_Partition, _impl_.is_dynamic_)
      + sizeof(DynamicPartitionsDeviceInfoProto_Partition::_impl_.is_dynamic_)
      - PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto_Partition, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicPartitionsDeviceInfoProto_Partition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_getter, &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once,
      file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto[0]);
}

// ===================================================================

class DynamicPartitionsDeviceInfoProto_Group::_Internal {
 public:
};

DynamicPartitionsDeviceInfoProto_Group::DynamicPartitionsDeviceInfoProto_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:android.DynamicPartitionsDeviceInfoProto.Group)
}
DynamicPartitionsDeviceInfoProto_Group::DynamicPartitionsDeviceInfoProto_Group(const DynamicPartitionsDeviceInfoProto_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DynamicPartitionsDeviceInfoProto_Group* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.maximum_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.maximum_size_ = from._impl_.maximum_size_;
  // @@protoc_insertion_point(copy_constructor:android.DynamicPartitionsDeviceInfoProto.Group)
}

inline void DynamicPartitionsDeviceInfoProto_Group::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.maximum_size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DynamicPartitionsDeviceInfoProto_Group::~DynamicPartitionsDeviceInfoProto_Group() {
  // @@protoc_insertion_point(destructor:android.DynamicPartitionsDeviceInfoProto.Group)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicPartitionsDeviceInfoProto_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DynamicPartitionsDeviceInfoProto_Group::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicPartitionsDeviceInfoProto_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:android.DynamicPartitionsDeviceInfoProto.Group)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.maximum_size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicPartitionsDeviceInfoProto_Group::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "android.DynamicPartitionsDeviceInfoProto.Group.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 maximum_size = 2 [json_name = "maximum_size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maximum_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicPartitionsDeviceInfoProto_Group::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.DynamicPartitionsDeviceInfoProto.Group)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.DynamicPartitionsDeviceInfoProto.Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 maximum_size = 2 [json_name = "maximum_size"];
  if (this->_internal_maximum_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maximum_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.DynamicPartitionsDeviceInfoProto.Group)
  return target;
}

size_t DynamicPartitionsDeviceInfoProto_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.DynamicPartitionsDeviceInfoProto.Group)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 maximum_size = 2 [json_name = "maximum_size"];
  if (this->_internal_maximum_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_maximum_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicPartitionsDeviceInfoProto_Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DynamicPartitionsDeviceInfoProto_Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicPartitionsDeviceInfoProto_Group::GetClassData() const { return &_class_data_; }


void DynamicPartitionsDeviceInfoProto_Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DynamicPartitionsDeviceInfoProto_Group*>(&to_msg);
  auto& from = static_cast<const DynamicPartitionsDeviceInfoProto_Group&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:android.DynamicPartitionsDeviceInfoProto.Group)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_maximum_size() != 0) {
    _this->_internal_set_maximum_size(from._internal_maximum_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicPartitionsDeviceInfoProto_Group::CopyFrom(const DynamicPartitionsDeviceInfoProto_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.DynamicPartitionsDeviceInfoProto.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicPartitionsDeviceInfoProto_Group::IsInitialized() const {
  return true;
}

void DynamicPartitionsDeviceInfoProto_Group::InternalSwap(DynamicPartitionsDeviceInfoProto_Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.maximum_size_, other->_impl_.maximum_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicPartitionsDeviceInfoProto_Group::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_getter, &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once,
      file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto[1]);
}

// ===================================================================

class DynamicPartitionsDeviceInfoProto_BlockDevice::_Internal {
 public:
};

DynamicPartitionsDeviceInfoProto_BlockDevice::DynamicPartitionsDeviceInfoProto_BlockDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
}
DynamicPartitionsDeviceInfoProto_BlockDevice::DynamicPartitionsDeviceInfoProto_BlockDevice(const DynamicPartitionsDeviceInfoProto_BlockDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DynamicPartitionsDeviceInfoProto_BlockDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.block_size_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.alignment_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alignment_offset_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.alignment_offset_));
  // @@protoc_insertion_point(copy_constructor:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
}

inline void DynamicPartitionsDeviceInfoProto_BlockDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.block_size_){uint64_t{0u}}
    , decltype(_impl_.alignment_){uint64_t{0u}}
    , decltype(_impl_.alignment_offset_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DynamicPartitionsDeviceInfoProto_BlockDevice::~DynamicPartitionsDeviceInfoProto_BlockDevice() {
  // @@protoc_insertion_point(destructor:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicPartitionsDeviceInfoProto_BlockDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DynamicPartitionsDeviceInfoProto_BlockDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicPartitionsDeviceInfoProto_BlockDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.alignment_offset_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.alignment_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicPartitionsDeviceInfoProto_BlockDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "android.DynamicPartitionsDeviceInfoProto.BlockDevice.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_size = 3 [json_name = "block_size"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 alignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 alignment_offset = 5 [json_name = "alignment_offset"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.alignment_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicPartitionsDeviceInfoProto_BlockDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.DynamicPartitionsDeviceInfoProto.BlockDevice.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // uint64 block_size = 3 [json_name = "block_size"];
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_block_size(), target);
  }

  // uint64 alignment = 4;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_alignment(), target);
  }

  // uint64 alignment_offset = 5 [json_name = "alignment_offset"];
  if (this->_internal_alignment_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_alignment_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  return target;
}

size_t DynamicPartitionsDeviceInfoProto_BlockDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 block_size = 3 [json_name = "block_size"];
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_size());
  }

  // uint64 alignment = 4;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_alignment());
  }

  // uint64 alignment_offset = 5 [json_name = "alignment_offset"];
  if (this->_internal_alignment_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_alignment_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicPartitionsDeviceInfoProto_BlockDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DynamicPartitionsDeviceInfoProto_BlockDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicPartitionsDeviceInfoProto_BlockDevice::GetClassData() const { return &_class_data_; }


void DynamicPartitionsDeviceInfoProto_BlockDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DynamicPartitionsDeviceInfoProto_BlockDevice*>(&to_msg);
  auto& from = static_cast<const DynamicPartitionsDeviceInfoProto_BlockDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_alignment_offset() != 0) {
    _this->_internal_set_alignment_offset(from._internal_alignment_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicPartitionsDeviceInfoProto_BlockDevice::CopyFrom(const DynamicPartitionsDeviceInfoProto_BlockDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicPartitionsDeviceInfoProto_BlockDevice::IsInitialized() const {
  return true;
}

void DynamicPartitionsDeviceInfoProto_BlockDevice::InternalSwap(DynamicPartitionsDeviceInfoProto_BlockDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.alignment_offset_)
      + sizeof(DynamicPartitionsDeviceInfoProto_BlockDevice::_impl_.alignment_offset_)
      - PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto_BlockDevice, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicPartitionsDeviceInfoProto_BlockDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_getter, &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once,
      file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto[2]);
}

// ===================================================================

class DynamicPartitionsDeviceInfoProto::_Internal {
 public:
};

DynamicPartitionsDeviceInfoProto::DynamicPartitionsDeviceInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:android.DynamicPartitionsDeviceInfoProto)
}
DynamicPartitionsDeviceInfoProto::DynamicPartitionsDeviceInfoProto(const DynamicPartitionsDeviceInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DynamicPartitionsDeviceInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.block_devices_){from._impl_.block_devices_}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.retrofit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retrofit_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.retrofit_));
  // @@protoc_insertion_point(copy_constructor:android.DynamicPartitionsDeviceInfoProto)
}

inline void DynamicPartitionsDeviceInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , decltype(_impl_.groups_){arena}
    , decltype(_impl_.block_devices_){arena}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.retrofit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DynamicPartitionsDeviceInfoProto::~DynamicPartitionsDeviceInfoProto() {
  // @@protoc_insertion_point(destructor:android.DynamicPartitionsDeviceInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicPartitionsDeviceInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
  _impl_.groups_.~RepeatedPtrField();
  _impl_.block_devices_.~RepeatedPtrField();
}

void DynamicPartitionsDeviceInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicPartitionsDeviceInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.DynamicPartitionsDeviceInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  _impl_.groups_.Clear();
  _impl_.block_devices_.Clear();
  ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retrofit_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.retrofit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicPartitionsDeviceInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool retrofit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.retrofit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .android.DynamicPartitionsDeviceInfoProto.Partition partitions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .android.DynamicPartitionsDeviceInfoProto.Group groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .android.DynamicPartitionsDeviceInfoProto.BlockDevice block_devices = 5 [json_name = "block_devices"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicPartitionsDeviceInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.DynamicPartitionsDeviceInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool retrofit = 2;
  if (this->_internal_retrofit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_retrofit(), target);
  }

  // repeated .android.DynamicPartitionsDeviceInfoProto.Partition partitions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .android.DynamicPartitionsDeviceInfoProto.Group groups = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .android.DynamicPartitionsDeviceInfoProto.BlockDevice block_devices = 5 [json_name = "block_devices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.DynamicPartitionsDeviceInfoProto)
  return target;
}

size_t DynamicPartitionsDeviceInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.DynamicPartitionsDeviceInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.DynamicPartitionsDeviceInfoProto.Partition partitions = 3;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .android.DynamicPartitionsDeviceInfoProto.Group groups = 4;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .android.DynamicPartitionsDeviceInfoProto.BlockDevice block_devices = 5 [json_name = "block_devices"];
  total_size += 1UL * this->_internal_block_devices_size();
  for (const auto& msg : this->_impl_.block_devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool retrofit = 2;
  if (this->_internal_retrofit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicPartitionsDeviceInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DynamicPartitionsDeviceInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicPartitionsDeviceInfoProto::GetClassData() const { return &_class_data_; }


void DynamicPartitionsDeviceInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DynamicPartitionsDeviceInfoProto*>(&to_msg);
  auto& from = static_cast<const DynamicPartitionsDeviceInfoProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:android.DynamicPartitionsDeviceInfoProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_impl_.block_devices_.MergeFrom(from._impl_.block_devices_);
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_retrofit() != 0) {
    _this->_internal_set_retrofit(from._internal_retrofit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicPartitionsDeviceInfoProto::CopyFrom(const DynamicPartitionsDeviceInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.DynamicPartitionsDeviceInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicPartitionsDeviceInfoProto::IsInitialized() const {
  return true;
}

void DynamicPartitionsDeviceInfoProto::InternalSwap(DynamicPartitionsDeviceInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  _impl_.block_devices_.InternalSwap(&other->_impl_.block_devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto, _impl_.retrofit_)
      + sizeof(DynamicPartitionsDeviceInfoProto::_impl_.retrofit_)
      - PROTOBUF_FIELD_OFFSET(DynamicPartitionsDeviceInfoProto, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicPartitionsDeviceInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_getter, &descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto_once,
      file_level_metadata_dynamic_5fpartitions_5fdevice_5finfo_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::DynamicPartitionsDeviceInfoProto_Partition*
Arena::CreateMaybeMessage< ::android::DynamicPartitionsDeviceInfoProto_Partition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::android::DynamicPartitionsDeviceInfoProto_Partition >(arena);
}
template<> PROTOBUF_NOINLINE ::android::DynamicPartitionsDeviceInfoProto_Group*
Arena::CreateMaybeMessage< ::android::DynamicPartitionsDeviceInfoProto_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::android::DynamicPartitionsDeviceInfoProto_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::android::DynamicPartitionsDeviceInfoProto_BlockDevice*
Arena::CreateMaybeMessage< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::android::DynamicPartitionsDeviceInfoProto*
Arena::CreateMaybeMessage< ::android::DynamicPartitionsDeviceInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::android::DynamicPartitionsDeviceInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
