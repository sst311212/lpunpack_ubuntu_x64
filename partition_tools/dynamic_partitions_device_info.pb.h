// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_partitions_device_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dynamic_5fpartitions_5fdevice_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dynamic_5fpartitions_5fdevice_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dynamic_5fpartitions_5fdevice_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
namespace android {
class DynamicPartitionsDeviceInfoProto;
struct DynamicPartitionsDeviceInfoProtoDefaultTypeInternal;
extern DynamicPartitionsDeviceInfoProtoDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_default_instance_;
class DynamicPartitionsDeviceInfoProto_BlockDevice;
struct DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal;
extern DynamicPartitionsDeviceInfoProto_BlockDeviceDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_BlockDevice_default_instance_;
class DynamicPartitionsDeviceInfoProto_Group;
struct DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal;
extern DynamicPartitionsDeviceInfoProto_GroupDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_Group_default_instance_;
class DynamicPartitionsDeviceInfoProto_Partition;
struct DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal;
extern DynamicPartitionsDeviceInfoProto_PartitionDefaultTypeInternal _DynamicPartitionsDeviceInfoProto_Partition_default_instance_;
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::DynamicPartitionsDeviceInfoProto* Arena::CreateMaybeMessage<::android::DynamicPartitionsDeviceInfoProto>(Arena*);
template<> ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* Arena::CreateMaybeMessage<::android::DynamicPartitionsDeviceInfoProto_BlockDevice>(Arena*);
template<> ::android::DynamicPartitionsDeviceInfoProto_Group* Arena::CreateMaybeMessage<::android::DynamicPartitionsDeviceInfoProto_Group>(Arena*);
template<> ::android::DynamicPartitionsDeviceInfoProto_Partition* Arena::CreateMaybeMessage<::android::DynamicPartitionsDeviceInfoProto_Partition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {

// ===================================================================

class DynamicPartitionsDeviceInfoProto_Partition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.DynamicPartitionsDeviceInfoProto.Partition) */ {
 public:
  inline DynamicPartitionsDeviceInfoProto_Partition() : DynamicPartitionsDeviceInfoProto_Partition(nullptr) {}
  ~DynamicPartitionsDeviceInfoProto_Partition() override;
  explicit PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_Partition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicPartitionsDeviceInfoProto_Partition(const DynamicPartitionsDeviceInfoProto_Partition& from);
  DynamicPartitionsDeviceInfoProto_Partition(DynamicPartitionsDeviceInfoProto_Partition&& from) noexcept
    : DynamicPartitionsDeviceInfoProto_Partition() {
    *this = ::std::move(from);
  }

  inline DynamicPartitionsDeviceInfoProto_Partition& operator=(const DynamicPartitionsDeviceInfoProto_Partition& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicPartitionsDeviceInfoProto_Partition& operator=(DynamicPartitionsDeviceInfoProto_Partition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicPartitionsDeviceInfoProto_Partition& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicPartitionsDeviceInfoProto_Partition* internal_default_instance() {
    return reinterpret_cast<const DynamicPartitionsDeviceInfoProto_Partition*>(
               &_DynamicPartitionsDeviceInfoProto_Partition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DynamicPartitionsDeviceInfoProto_Partition& a, DynamicPartitionsDeviceInfoProto_Partition& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicPartitionsDeviceInfoProto_Partition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicPartitionsDeviceInfoProto_Partition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicPartitionsDeviceInfoProto_Partition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicPartitionsDeviceInfoProto_Partition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicPartitionsDeviceInfoProto_Partition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DynamicPartitionsDeviceInfoProto_Partition& from) {
    DynamicPartitionsDeviceInfoProto_Partition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicPartitionsDeviceInfoProto_Partition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.DynamicPartitionsDeviceInfoProto.Partition";
  }
  protected:
  explicit DynamicPartitionsDeviceInfoProto_Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kFsTypeFieldNumber = 7,
    kSizeFieldNumber = 4,
    kFsSizeFieldNumber = 5,
    kFsUsedFieldNumber = 6,
    kIsDynamicFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string group_name = 2 [json_name = "group_name"];
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string fs_type = 7 [json_name = "fs_type"];
  void clear_fs_type();
  const std::string& fs_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fs_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fs_type();
  PROTOBUF_NODISCARD std::string* release_fs_type();
  void set_allocated_fs_type(std::string* fs_type);
  private:
  const std::string& _internal_fs_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fs_type(const std::string& value);
  std::string* _internal_mutable_fs_type();
  public:

  // uint64 size = 4;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 fs_size = 5 [json_name = "fs_size"];
  void clear_fs_size();
  uint64_t fs_size() const;
  void set_fs_size(uint64_t value);
  private:
  uint64_t _internal_fs_size() const;
  void _internal_set_fs_size(uint64_t value);
  public:

  // uint64 fs_used = 6 [json_name = "fs_used"];
  void clear_fs_used();
  uint64_t fs_used() const;
  void set_fs_used(uint64_t value);
  private:
  uint64_t _internal_fs_used() const;
  void _internal_set_fs_used(uint64_t value);
  public:

  // bool is_dynamic = 3 [json_name = "is_dynamic"];
  void clear_is_dynamic();
  bool is_dynamic() const;
  void set_is_dynamic(bool value);
  private:
  bool _internal_is_dynamic() const;
  void _internal_set_is_dynamic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:android.DynamicPartitionsDeviceInfoProto.Partition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fs_type_;
    uint64_t size_;
    uint64_t fs_size_;
    uint64_t fs_used_;
    bool is_dynamic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DynamicPartitionsDeviceInfoProto_Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.DynamicPartitionsDeviceInfoProto.Group) */ {
 public:
  inline DynamicPartitionsDeviceInfoProto_Group() : DynamicPartitionsDeviceInfoProto_Group(nullptr) {}
  ~DynamicPartitionsDeviceInfoProto_Group() override;
  explicit PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicPartitionsDeviceInfoProto_Group(const DynamicPartitionsDeviceInfoProto_Group& from);
  DynamicPartitionsDeviceInfoProto_Group(DynamicPartitionsDeviceInfoProto_Group&& from) noexcept
    : DynamicPartitionsDeviceInfoProto_Group() {
    *this = ::std::move(from);
  }

  inline DynamicPartitionsDeviceInfoProto_Group& operator=(const DynamicPartitionsDeviceInfoProto_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicPartitionsDeviceInfoProto_Group& operator=(DynamicPartitionsDeviceInfoProto_Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicPartitionsDeviceInfoProto_Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicPartitionsDeviceInfoProto_Group* internal_default_instance() {
    return reinterpret_cast<const DynamicPartitionsDeviceInfoProto_Group*>(
               &_DynamicPartitionsDeviceInfoProto_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DynamicPartitionsDeviceInfoProto_Group& a, DynamicPartitionsDeviceInfoProto_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicPartitionsDeviceInfoProto_Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicPartitionsDeviceInfoProto_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicPartitionsDeviceInfoProto_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicPartitionsDeviceInfoProto_Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicPartitionsDeviceInfoProto_Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DynamicPartitionsDeviceInfoProto_Group& from) {
    DynamicPartitionsDeviceInfoProto_Group::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicPartitionsDeviceInfoProto_Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.DynamicPartitionsDeviceInfoProto.Group";
  }
  protected:
  explicit DynamicPartitionsDeviceInfoProto_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMaximumSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 maximum_size = 2 [json_name = "maximum_size"];
  void clear_maximum_size();
  uint64_t maximum_size() const;
  void set_maximum_size(uint64_t value);
  private:
  uint64_t _internal_maximum_size() const;
  void _internal_set_maximum_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:android.DynamicPartitionsDeviceInfoProto.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t maximum_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DynamicPartitionsDeviceInfoProto_BlockDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.DynamicPartitionsDeviceInfoProto.BlockDevice) */ {
 public:
  inline DynamicPartitionsDeviceInfoProto_BlockDevice() : DynamicPartitionsDeviceInfoProto_BlockDevice(nullptr) {}
  ~DynamicPartitionsDeviceInfoProto_BlockDevice() override;
  explicit PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto_BlockDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicPartitionsDeviceInfoProto_BlockDevice(const DynamicPartitionsDeviceInfoProto_BlockDevice& from);
  DynamicPartitionsDeviceInfoProto_BlockDevice(DynamicPartitionsDeviceInfoProto_BlockDevice&& from) noexcept
    : DynamicPartitionsDeviceInfoProto_BlockDevice() {
    *this = ::std::move(from);
  }

  inline DynamicPartitionsDeviceInfoProto_BlockDevice& operator=(const DynamicPartitionsDeviceInfoProto_BlockDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicPartitionsDeviceInfoProto_BlockDevice& operator=(DynamicPartitionsDeviceInfoProto_BlockDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicPartitionsDeviceInfoProto_BlockDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicPartitionsDeviceInfoProto_BlockDevice* internal_default_instance() {
    return reinterpret_cast<const DynamicPartitionsDeviceInfoProto_BlockDevice*>(
               &_DynamicPartitionsDeviceInfoProto_BlockDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DynamicPartitionsDeviceInfoProto_BlockDevice& a, DynamicPartitionsDeviceInfoProto_BlockDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicPartitionsDeviceInfoProto_BlockDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicPartitionsDeviceInfoProto_BlockDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicPartitionsDeviceInfoProto_BlockDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicPartitionsDeviceInfoProto_BlockDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicPartitionsDeviceInfoProto_BlockDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DynamicPartitionsDeviceInfoProto_BlockDevice& from) {
    DynamicPartitionsDeviceInfoProto_BlockDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicPartitionsDeviceInfoProto_BlockDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.DynamicPartitionsDeviceInfoProto.BlockDevice";
  }
  protected:
  explicit DynamicPartitionsDeviceInfoProto_BlockDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kBlockSizeFieldNumber = 3,
    kAlignmentFieldNumber = 4,
    kAlignmentOffsetFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 block_size = 3 [json_name = "block_size"];
  void clear_block_size();
  uint64_t block_size() const;
  void set_block_size(uint64_t value);
  private:
  uint64_t _internal_block_size() const;
  void _internal_set_block_size(uint64_t value);
  public:

  // uint64 alignment = 4;
  void clear_alignment();
  uint64_t alignment() const;
  void set_alignment(uint64_t value);
  private:
  uint64_t _internal_alignment() const;
  void _internal_set_alignment(uint64_t value);
  public:

  // uint64 alignment_offset = 5 [json_name = "alignment_offset"];
  void clear_alignment_offset();
  uint64_t alignment_offset() const;
  void set_alignment_offset(uint64_t value);
  private:
  uint64_t _internal_alignment_offset() const;
  void _internal_set_alignment_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:android.DynamicPartitionsDeviceInfoProto.BlockDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t size_;
    uint64_t block_size_;
    uint64_t alignment_;
    uint64_t alignment_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DynamicPartitionsDeviceInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.DynamicPartitionsDeviceInfoProto) */ {
 public:
  inline DynamicPartitionsDeviceInfoProto() : DynamicPartitionsDeviceInfoProto(nullptr) {}
  ~DynamicPartitionsDeviceInfoProto() override;
  explicit PROTOBUF_CONSTEXPR DynamicPartitionsDeviceInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicPartitionsDeviceInfoProto(const DynamicPartitionsDeviceInfoProto& from);
  DynamicPartitionsDeviceInfoProto(DynamicPartitionsDeviceInfoProto&& from) noexcept
    : DynamicPartitionsDeviceInfoProto() {
    *this = ::std::move(from);
  }

  inline DynamicPartitionsDeviceInfoProto& operator=(const DynamicPartitionsDeviceInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicPartitionsDeviceInfoProto& operator=(DynamicPartitionsDeviceInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicPartitionsDeviceInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicPartitionsDeviceInfoProto* internal_default_instance() {
    return reinterpret_cast<const DynamicPartitionsDeviceInfoProto*>(
               &_DynamicPartitionsDeviceInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DynamicPartitionsDeviceInfoProto& a, DynamicPartitionsDeviceInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicPartitionsDeviceInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicPartitionsDeviceInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicPartitionsDeviceInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicPartitionsDeviceInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicPartitionsDeviceInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DynamicPartitionsDeviceInfoProto& from) {
    DynamicPartitionsDeviceInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicPartitionsDeviceInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.DynamicPartitionsDeviceInfoProto";
  }
  protected:
  explicit DynamicPartitionsDeviceInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DynamicPartitionsDeviceInfoProto_Partition Partition;
  typedef DynamicPartitionsDeviceInfoProto_Group Group;
  typedef DynamicPartitionsDeviceInfoProto_BlockDevice BlockDevice;

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 3,
    kGroupsFieldNumber = 4,
    kBlockDevicesFieldNumber = 5,
    kEnabledFieldNumber = 1,
    kRetrofitFieldNumber = 2,
  };
  // repeated .android.DynamicPartitionsDeviceInfoProto.Partition partitions = 3;
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;
  public:
  void clear_partitions();
  ::android::DynamicPartitionsDeviceInfoProto_Partition* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Partition >*
      mutable_partitions();
  private:
  const ::android::DynamicPartitionsDeviceInfoProto_Partition& _internal_partitions(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_Partition* _internal_add_partitions();
  public:
  const ::android::DynamicPartitionsDeviceInfoProto_Partition& partitions(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_Partition* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Partition >&
      partitions() const;

  // repeated .android.DynamicPartitionsDeviceInfoProto.Group groups = 4;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::android::DynamicPartitionsDeviceInfoProto_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Group >*
      mutable_groups();
  private:
  const ::android::DynamicPartitionsDeviceInfoProto_Group& _internal_groups(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_Group* _internal_add_groups();
  public:
  const ::android::DynamicPartitionsDeviceInfoProto_Group& groups(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Group >&
      groups() const;

  // repeated .android.DynamicPartitionsDeviceInfoProto.BlockDevice block_devices = 5 [json_name = "block_devices"];
  int block_devices_size() const;
  private:
  int _internal_block_devices_size() const;
  public:
  void clear_block_devices();
  ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* mutable_block_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >*
      mutable_block_devices();
  private:
  const ::android::DynamicPartitionsDeviceInfoProto_BlockDevice& _internal_block_devices(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* _internal_add_block_devices();
  public:
  const ::android::DynamicPartitionsDeviceInfoProto_BlockDevice& block_devices(int index) const;
  ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* add_block_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >&
      block_devices() const;

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool retrofit = 2;
  void clear_retrofit();
  bool retrofit() const;
  void set_retrofit(bool value);
  private:
  bool _internal_retrofit() const;
  void _internal_set_retrofit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:android.DynamicPartitionsDeviceInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Partition > partitions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Group > groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice > block_devices_;
    bool enabled_;
    bool retrofit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dynamic_5fpartitions_5fdevice_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicPartitionsDeviceInfoProto_Partition

// string name = 1;
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::name() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DynamicPartitionsDeviceInfoProto_Partition::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.name)
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.Partition.name)
  return _s;
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::release_name() {
  // @@protoc_insertion_point(field_release:android.DynamicPartitionsDeviceInfoProto.Partition.name)
  return _impl_.name_.Release();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:android.DynamicPartitionsDeviceInfoProto.Partition.name)
}

// string group_name = 2 [json_name = "group_name"];
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::group_name() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DynamicPartitionsDeviceInfoProto_Partition::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.group_name)
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.Partition.group_name)
  return _s;
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::release_group_name() {
  // @@protoc_insertion_point(field_release:android.DynamicPartitionsDeviceInfoProto.Partition.group_name)
  return _impl_.group_name_.Release();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:android.DynamicPartitionsDeviceInfoProto.Partition.group_name)
}

// bool is_dynamic = 3 [json_name = "is_dynamic"];
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_is_dynamic() {
  _impl_.is_dynamic_ = false;
}
inline bool DynamicPartitionsDeviceInfoProto_Partition::_internal_is_dynamic() const {
  return _impl_.is_dynamic_;
}
inline bool DynamicPartitionsDeviceInfoProto_Partition::is_dynamic() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.is_dynamic)
  return _internal_is_dynamic();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_is_dynamic(bool value) {
  
  _impl_.is_dynamic_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_is_dynamic(bool value) {
  _internal_set_is_dynamic(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.is_dynamic)
}

// uint64 size = 4;
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::size() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.size)
  return _internal_size();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.size)
}

// uint64 fs_size = 5 [json_name = "fs_size"];
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_fs_size() {
  _impl_.fs_size_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::_internal_fs_size() const {
  return _impl_.fs_size_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::fs_size() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.fs_size)
  return _internal_fs_size();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_fs_size(uint64_t value) {
  
  _impl_.fs_size_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_fs_size(uint64_t value) {
  _internal_set_fs_size(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.fs_size)
}

// uint64 fs_used = 6 [json_name = "fs_used"];
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_fs_used() {
  _impl_.fs_used_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::_internal_fs_used() const {
  return _impl_.fs_used_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Partition::fs_used() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.fs_used)
  return _internal_fs_used();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_fs_used(uint64_t value) {
  
  _impl_.fs_used_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_fs_used(uint64_t value) {
  _internal_set_fs_used(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.fs_used)
}

// string fs_type = 7 [json_name = "fs_type"];
inline void DynamicPartitionsDeviceInfoProto_Partition::clear_fs_type() {
  _impl_.fs_type_.ClearToEmpty();
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::fs_type() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Partition.fs_type)
  return _internal_fs_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DynamicPartitionsDeviceInfoProto_Partition::set_fs_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fs_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Partition.fs_type)
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::mutable_fs_type() {
  std::string* _s = _internal_mutable_fs_type();
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.Partition.fs_type)
  return _s;
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Partition::_internal_fs_type() const {
  return _impl_.fs_type_.Get();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::_internal_set_fs_type(const std::string& value) {
  
  _impl_.fs_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::_internal_mutable_fs_type() {
  
  return _impl_.fs_type_.Mutable(GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Partition::release_fs_type() {
  // @@protoc_insertion_point(field_release:android.DynamicPartitionsDeviceInfoProto.Partition.fs_type)
  return _impl_.fs_type_.Release();
}
inline void DynamicPartitionsDeviceInfoProto_Partition::set_allocated_fs_type(std::string* fs_type) {
  if (fs_type != nullptr) {
    
  } else {
    
  }
  _impl_.fs_type_.SetAllocated(fs_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fs_type_.IsDefault()) {
    _impl_.fs_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:android.DynamicPartitionsDeviceInfoProto.Partition.fs_type)
}

// -------------------------------------------------------------------

// DynamicPartitionsDeviceInfoProto_Group

// string name = 1;
inline void DynamicPartitionsDeviceInfoProto_Group::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Group::name() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DynamicPartitionsDeviceInfoProto_Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Group.name)
}
inline std::string* DynamicPartitionsDeviceInfoProto_Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.Group.name)
  return _s;
}
inline const std::string& DynamicPartitionsDeviceInfoProto_Group::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DynamicPartitionsDeviceInfoProto_Group::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Group::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_Group::release_name() {
  // @@protoc_insertion_point(field_release:android.DynamicPartitionsDeviceInfoProto.Group.name)
  return _impl_.name_.Release();
}
inline void DynamicPartitionsDeviceInfoProto_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:android.DynamicPartitionsDeviceInfoProto.Group.name)
}

// uint64 maximum_size = 2 [json_name = "maximum_size"];
inline void DynamicPartitionsDeviceInfoProto_Group::clear_maximum_size() {
  _impl_.maximum_size_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Group::_internal_maximum_size() const {
  return _impl_.maximum_size_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_Group::maximum_size() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.Group.maximum_size)
  return _internal_maximum_size();
}
inline void DynamicPartitionsDeviceInfoProto_Group::_internal_set_maximum_size(uint64_t value) {
  
  _impl_.maximum_size_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_Group::set_maximum_size(uint64_t value) {
  _internal_set_maximum_size(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.Group.maximum_size)
}

// -------------------------------------------------------------------

// DynamicPartitionsDeviceInfoProto_BlockDevice

// string name = 1;
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DynamicPartitionsDeviceInfoProto_BlockDevice::name() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.BlockDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DynamicPartitionsDeviceInfoProto_BlockDevice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.BlockDevice.name)
}
inline std::string* DynamicPartitionsDeviceInfoProto_BlockDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.BlockDevice.name)
  return _s;
}
inline const std::string& DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DynamicPartitionsDeviceInfoProto_BlockDevice::release_name() {
  // @@protoc_insertion_point(field_release:android.DynamicPartitionsDeviceInfoProto.BlockDevice.name)
  return _impl_.name_.Release();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:android.DynamicPartitionsDeviceInfoProto.BlockDevice.name)
}

// uint64 size = 2;
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::size() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.BlockDevice.size)
  return _internal_size();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.BlockDevice.size)
}

// uint64 block_size = 3 [json_name = "block_size"];
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::clear_block_size() {
  _impl_.block_size_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_block_size() const {
  return _impl_.block_size_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::block_size() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.BlockDevice.block_size)
  return _internal_block_size();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_set_block_size(uint64_t value) {
  
  _impl_.block_size_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::set_block_size(uint64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.BlockDevice.block_size)
}

// uint64 alignment = 4;
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::clear_alignment() {
  _impl_.alignment_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_alignment() const {
  return _impl_.alignment_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::alignment() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.BlockDevice.alignment)
  return _internal_alignment();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_set_alignment(uint64_t value) {
  
  _impl_.alignment_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::set_alignment(uint64_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.BlockDevice.alignment)
}

// uint64 alignment_offset = 5 [json_name = "alignment_offset"];
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::clear_alignment_offset() {
  _impl_.alignment_offset_ = uint64_t{0u};
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_alignment_offset() const {
  return _impl_.alignment_offset_;
}
inline uint64_t DynamicPartitionsDeviceInfoProto_BlockDevice::alignment_offset() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.BlockDevice.alignment_offset)
  return _internal_alignment_offset();
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::_internal_set_alignment_offset(uint64_t value) {
  
  _impl_.alignment_offset_ = value;
}
inline void DynamicPartitionsDeviceInfoProto_BlockDevice::set_alignment_offset(uint64_t value) {
  _internal_set_alignment_offset(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.BlockDevice.alignment_offset)
}

// -------------------------------------------------------------------

// DynamicPartitionsDeviceInfoProto

// bool enabled = 1;
inline void DynamicPartitionsDeviceInfoProto::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool DynamicPartitionsDeviceInfoProto::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool DynamicPartitionsDeviceInfoProto::enabled() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.enabled)
  return _internal_enabled();
}
inline void DynamicPartitionsDeviceInfoProto::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void DynamicPartitionsDeviceInfoProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.enabled)
}

// bool retrofit = 2;
inline void DynamicPartitionsDeviceInfoProto::clear_retrofit() {
  _impl_.retrofit_ = false;
}
inline bool DynamicPartitionsDeviceInfoProto::_internal_retrofit() const {
  return _impl_.retrofit_;
}
inline bool DynamicPartitionsDeviceInfoProto::retrofit() const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.retrofit)
  return _internal_retrofit();
}
inline void DynamicPartitionsDeviceInfoProto::_internal_set_retrofit(bool value) {
  
  _impl_.retrofit_ = value;
}
inline void DynamicPartitionsDeviceInfoProto::set_retrofit(bool value) {
  _internal_set_retrofit(value);
  // @@protoc_insertion_point(field_set:android.DynamicPartitionsDeviceInfoProto.retrofit)
}

// repeated .android.DynamicPartitionsDeviceInfoProto.Partition partitions = 3;
inline int DynamicPartitionsDeviceInfoProto::_internal_partitions_size() const {
  return _impl_.partitions_.size();
}
inline int DynamicPartitionsDeviceInfoProto::partitions_size() const {
  return _internal_partitions_size();
}
inline void DynamicPartitionsDeviceInfoProto::clear_partitions() {
  _impl_.partitions_.Clear();
}
inline ::android::DynamicPartitionsDeviceInfoProto_Partition* DynamicPartitionsDeviceInfoProto::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.partitions)
  return _impl_.partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Partition >*
DynamicPartitionsDeviceInfoProto::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:android.DynamicPartitionsDeviceInfoProto.partitions)
  return &_impl_.partitions_;
}
inline const ::android::DynamicPartitionsDeviceInfoProto_Partition& DynamicPartitionsDeviceInfoProto::_internal_partitions(int index) const {
  return _impl_.partitions_.Get(index);
}
inline const ::android::DynamicPartitionsDeviceInfoProto_Partition& DynamicPartitionsDeviceInfoProto::partitions(int index) const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.partitions)
  return _internal_partitions(index);
}
inline ::android::DynamicPartitionsDeviceInfoProto_Partition* DynamicPartitionsDeviceInfoProto::_internal_add_partitions() {
  return _impl_.partitions_.Add();
}
inline ::android::DynamicPartitionsDeviceInfoProto_Partition* DynamicPartitionsDeviceInfoProto::add_partitions() {
  ::android::DynamicPartitionsDeviceInfoProto_Partition* _add = _internal_add_partitions();
  // @@protoc_insertion_point(field_add:android.DynamicPartitionsDeviceInfoProto.partitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Partition >&
DynamicPartitionsDeviceInfoProto::partitions() const {
  // @@protoc_insertion_point(field_list:android.DynamicPartitionsDeviceInfoProto.partitions)
  return _impl_.partitions_;
}

// repeated .android.DynamicPartitionsDeviceInfoProto.Group groups = 4;
inline int DynamicPartitionsDeviceInfoProto::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int DynamicPartitionsDeviceInfoProto::groups_size() const {
  return _internal_groups_size();
}
inline void DynamicPartitionsDeviceInfoProto::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::android::DynamicPartitionsDeviceInfoProto_Group* DynamicPartitionsDeviceInfoProto::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Group >*
DynamicPartitionsDeviceInfoProto::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:android.DynamicPartitionsDeviceInfoProto.groups)
  return &_impl_.groups_;
}
inline const ::android::DynamicPartitionsDeviceInfoProto_Group& DynamicPartitionsDeviceInfoProto::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::android::DynamicPartitionsDeviceInfoProto_Group& DynamicPartitionsDeviceInfoProto::groups(int index) const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.groups)
  return _internal_groups(index);
}
inline ::android::DynamicPartitionsDeviceInfoProto_Group* DynamicPartitionsDeviceInfoProto::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::android::DynamicPartitionsDeviceInfoProto_Group* DynamicPartitionsDeviceInfoProto::add_groups() {
  ::android::DynamicPartitionsDeviceInfoProto_Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:android.DynamicPartitionsDeviceInfoProto.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_Group >&
DynamicPartitionsDeviceInfoProto::groups() const {
  // @@protoc_insertion_point(field_list:android.DynamicPartitionsDeviceInfoProto.groups)
  return _impl_.groups_;
}

// repeated .android.DynamicPartitionsDeviceInfoProto.BlockDevice block_devices = 5 [json_name = "block_devices"];
inline int DynamicPartitionsDeviceInfoProto::_internal_block_devices_size() const {
  return _impl_.block_devices_.size();
}
inline int DynamicPartitionsDeviceInfoProto::block_devices_size() const {
  return _internal_block_devices_size();
}
inline void DynamicPartitionsDeviceInfoProto::clear_block_devices() {
  _impl_.block_devices_.Clear();
}
inline ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* DynamicPartitionsDeviceInfoProto::mutable_block_devices(int index) {
  // @@protoc_insertion_point(field_mutable:android.DynamicPartitionsDeviceInfoProto.block_devices)
  return _impl_.block_devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >*
DynamicPartitionsDeviceInfoProto::mutable_block_devices() {
  // @@protoc_insertion_point(field_mutable_list:android.DynamicPartitionsDeviceInfoProto.block_devices)
  return &_impl_.block_devices_;
}
inline const ::android::DynamicPartitionsDeviceInfoProto_BlockDevice& DynamicPartitionsDeviceInfoProto::_internal_block_devices(int index) const {
  return _impl_.block_devices_.Get(index);
}
inline const ::android::DynamicPartitionsDeviceInfoProto_BlockDevice& DynamicPartitionsDeviceInfoProto::block_devices(int index) const {
  // @@protoc_insertion_point(field_get:android.DynamicPartitionsDeviceInfoProto.block_devices)
  return _internal_block_devices(index);
}
inline ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* DynamicPartitionsDeviceInfoProto::_internal_add_block_devices() {
  return _impl_.block_devices_.Add();
}
inline ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* DynamicPartitionsDeviceInfoProto::add_block_devices() {
  ::android::DynamicPartitionsDeviceInfoProto_BlockDevice* _add = _internal_add_block_devices();
  // @@protoc_insertion_point(field_add:android.DynamicPartitionsDeviceInfoProto.block_devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::DynamicPartitionsDeviceInfoProto_BlockDevice >&
DynamicPartitionsDeviceInfoProto::block_devices() const {
  // @@protoc_insertion_point(field_list:android.DynamicPartitionsDeviceInfoProto.block_devices)
  return _impl_.block_devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dynamic_5fpartitions_5fdevice_5finfo_2eproto
